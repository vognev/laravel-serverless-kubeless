---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: "nats"
  name: nats-config
data:
  nats-server.conf: |-
    listen: 0.0.0.0:4222
    http: 0.0.0.0:8222

    # Authorization for client connections
    authorization {
      user: nats_client
      password: tOnDjH4oEm
      timeout:  1
    }

    # Logging options
    debug: false
    trace: false
    logtime: false

    # Pid file
    pid_file: "/tmp/nats-server.pid"

    # Some system overides


    # Clustering definition
    cluster {
      listen: 0.0.0.0:6222

      # Authorization for cluster connections
      authorization {
        user: nats_cluster
        password: mSc5zDtLam
        timeout:  1
      }

      # Routes are actively solicited and connected to from this server.
      # Other servers can connect to us if they supply the correct credentials
      # in their routes definitions from above
      routes = [
        nats://nats_cluster:mSc5zDtLam@nats-cluster:6222
      ]
    }


---
apiVersion: v1
kind: Service
metadata:
  name: nats-client
  labels:
    app: "nats"
spec:
  type: ClusterIP
  ports:
    - port: 4222
      targetPort: client
      name: client
  selector:
    app: "nats"

---
apiVersion: v1
kind: Service
metadata:
  name: nats-cluster
  labels:
    app: "nats"
spec:
  type: ClusterIP
  ports:
    - port: 6222
      targetPort: cluster
      name: cluster
  selector:
    app: "nats"

---
apiVersion: v1
kind: Service
metadata:
  name: nats-headless
  labels:
    app: nats
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: client
    port: 4222
    targetPort: client
  - name: cluster
    port: 6222
    targetPort: cluster
  selector:
    app: nats

---
apiVersion: v1
kind: Service
metadata:
  name: nats-monitoring
  labels:
    app: "nats"
spec:
  type: ClusterIP
  ports:
    - port: 8222
      targetPort: monitoring
      name: monitoring
  selector:
    app: "nats"

---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: nats
  labels:
    app: "nats"
spec:
  serviceName: nats-headless
  replicas: 1
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: "nats"
  template:
    metadata:
      labels:
        app: "nats"
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: nats
        image: docker.io/bitnami/nats:2.0.4-debian-9-r19
        imagePullPolicy: IfNotPresent
        command:
        - nats-server
        args:
        - -c
        - /opt/bitnami/nats/nats-server.conf
        # to ensure nats could run with non-root user, we put the configuration
        # file under `/opt/bitnami/nats/nats-server.conf`, please check the link below
        # for the implementation inside Dockerfile:
        # - https://github.com/bitnami/bitnami-docker-nats/blob/master/1/debian-9/Dockerfile#L12
        ports:
        - name: client
          containerPort: 4222
        - name: cluster
          containerPort: 6222
        - name: monitoring
          containerPort: 8222
        livenessProbe:
          httpGet:
            path: /
            port: monitoring
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /
            port: monitoring
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          {}

        volumeMounts:
          - name: config
            mountPath: /opt/bitnami/nats/nats-server.conf
            subPath: nats-server.conf
      volumes:
      - name: config
        configMap:
          name: nats-config

